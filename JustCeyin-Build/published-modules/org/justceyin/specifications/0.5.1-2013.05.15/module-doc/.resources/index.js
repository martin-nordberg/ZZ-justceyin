var index = [
{'name': 'org.justceyin.specifications', 'type': 'package', 'url': 'index.html#section-package', 'doc': '<p>Package contains classes for defining behavior-driven development style specifications.</p>\n', 'tags': [],'icons': ['icon-package']},
{'name': 'CompositeSpecification.childSpecifications', 'type': 'value', 'url': 'class_CompositeSpecification.html#childSpecifications', 'doc': '<p>The child specifications within this specification.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'CompositeSpecification.title', 'type': 'value', 'url': 'class_CompositeSpecification.html#title', 'doc': '<p>The title of this specification.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'CompositeSpecification.check', 'type': 'function', 'url': 'class_CompositeSpecification.html#check', 'doc': '<p>Executes all the child specifications and combines them into a composite result.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'CompositeSpecification', 'type': 'class', 'url': 'class_CompositeSpecification.html', 'doc': '<p>Specification composed of multiple sub-specifications.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'DeclarativeSpecification.title', 'type': 'value', 'url': 'interface_DeclarativeSpecification.html#title', 'doc': '<p>The title of this specification.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'DeclarativeSpecification.requirements', 'type': 'value', 'url': 'interface_DeclarativeSpecification.html#requirements', 'doc': '<p>The individual requirement statements making up this larger specification.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'DeclarativeSpecification.check', 'type': 'function', 'url': 'interface_DeclarativeSpecification.html#check', 'doc': '<p>Checks whether all the requirements within this specification are met.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'DeclarativeSpecification', 'type': 'interface', 'url': 'interface_DeclarativeSpecification.html', 'doc': '<p>Specification mixin defined in terms of a number of declarative requirements.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'ImperativeSpecification.title', 'type': 'value', 'url': 'interface_ImperativeSpecification.html#title', 'doc': '<p>The title of this specification.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ImperativeSpecification.tests', 'type': 'value', 'url': 'interface_ImperativeSpecification.html#tests', 'doc': '<p>The tests (in a derived class to be executed).</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'ImperativeSpecification.check', 'type': 'function', 'url': 'interface_ImperativeSpecification.html#check', 'doc': '<p>Execute the tests defined in a derived class.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ImperativeSpecification', 'type': 'interface', 'url': 'interface_ImperativeSpecification.html', 'doc': '<p>Specification mixin defined in terms of a number of test functions to be executed.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'MixedSpecification.check', 'type': 'function', 'url': 'interface_MixedSpecification.html#check', 'doc': '<p>Execute the tests defined in a derived class.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'MixedSpecification', 'type': 'interface', 'url': 'interface_MixedSpecification.html', 'doc': '<p>Specification mixin defined in terms of a both declarative requirements and test functions.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Specification.check', 'type': 'function', 'url': 'interface_Specification.html#check', 'doc': '<p>Tests whether this specification has been met.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Specification', 'type': 'interface', 'url': 'interface_Specification.html', 'doc': '<p>Interface defining a specification - an executable object that returns a constraint checking result.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'checkSpecification', 'type': 'function', 'url': 'index.html#checkSpecification', 'doc': '<p>Top level helper function tests whether a specification has been met.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'org.justceyin.specifications.examples', 'type': 'package', 'url': 'examples/index.html', 'doc': '<p>Package containing example code and associated justceyin-what DD specifications.</p>\n', 'tags': [],'icons': ['icon-package']},
{'name': 'IntegerStackDeclarativeSpecification.title', 'type': 'value', 'url': 'examples/class_IntegerStackDeclarativeSpecification.html#title', 'doc': '<p>The title of this specification.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'IntegerStackDeclarativeSpecification.requirements', 'type': 'value', 'url': 'examples/class_IntegerStackDeclarativeSpecification.html#requirements', 'doc': '<p>The individual requirement statements making up this larger specification.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'IntegerStackDeclarativeSpecification', 'type': 'class', 'url': 'examples/class_IntegerStackDeclarativeSpecification.html', 'doc': '<p>An example specification illustrating how to go about creating a declarative specification defined in\nterms of named…</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'IntegerStackImperativeSpecification.title', 'type': 'value', 'url': 'examples/class_IntegerStackImperativeSpecification.html#title', 'doc': '<p>The title of this specification.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'IntegerStackImperativeSpecification.tests', 'type': 'value', 'url': 'examples/class_IntegerStackImperativeSpecification.html#tests', 'doc': '<p>The tests within this specification.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'IntegerStackImperativeSpecification', 'type': 'class', 'url': 'examples/class_IntegerStackImperativeSpecification.html', 'doc': '<p>An example specification illustrating how to go about creating an imperative specification defined in\nterms of test…</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'IntegerStackMixedSpecification.title', 'type': 'value', 'url': 'examples/class_IntegerStackMixedSpecification.html#title', 'doc': '<p>The title of this specification.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'IntegerStackMixedSpecification.requirements', 'type': 'value', 'url': 'examples/class_IntegerStackMixedSpecification.html#requirements', 'doc': '<p>The individual requirement statements making up this larger specification.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'IntegerStackMixedSpecification.tests', 'type': 'value', 'url': 'examples/class_IntegerStackMixedSpecification.html#tests', 'doc': '<p>The tests (in a derived class to be executed).</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'IntegerStackMixedSpecification', 'type': 'class', 'url': 'examples/class_IntegerStackMixedSpecification.html', 'doc': '<p>An example of mixing imperative tests and declarative requirements in a single specification.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'EmptyStackException', 'type': 'class', 'url': 'examples/class_EmptyStackException.html', 'doc': '<p>Exception thrown when trying to pop from an empty stack.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'Stack.empty', 'type': 'attribute', 'url': 'examples/class_Stack.html#empty', 'doc': '<p>Determines whether this stack is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Stack.pop', 'type': 'function', 'url': 'examples/class_Stack.html#pop', 'doc': '<p>Takes the top value off the stack and returns a new stack with the remainder.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Stack.push', 'type': 'function', 'url': 'examples/class_Stack.html#push', 'doc': '<p>Pushes a new value on to the stack.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Stack.top', 'type': 'attribute', 'url': 'examples/class_Stack.html#top', 'doc': '<p>Returns the top value from the stack.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Stack.topIfPresent', 'type': 'attribute', 'url': 'examples/class_Stack.html#topIfPresent', 'doc': '<p>Returns the top value from the stack, if any.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Stack', 'type': 'class', 'url': 'examples/class_Stack.html', 'doc': '<p>Class to be tested - classic immutable stack implementation.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'emptyStack', 'type': 'function', 'url': 'examples/index.html#emptyStack', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'popStack', 'type': 'function', 'url': 'examples/index.html#popStack', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'pushOntoStack', 'type': 'function', 'url': 'examples/index.html#pushOntoStack', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'topOfStack', 'type': 'function', 'url': 'examples/index.html#topOfStack', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'topOfStackIfPresent', 'type': 'function', 'url': 'examples/index.html#topOfStackIfPresent', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StackConstraints.thatIsEmpty', 'type': 'attribute', 'url': 'examples/class_StackConstraints.html#thatIsEmpty', 'doc': '<p>Returns a constraint that checks that a stack is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StackConstraints.thatIsNotEmpty', 'type': 'attribute', 'url': 'examples/class_StackConstraints.html#thatIsNotEmpty', 'doc': '<p>Returns a constraint that checks that a stack is not empty.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StackConstraints.withTop', 'type': 'function', 'url': 'examples/class_StackConstraints.html#withTop', 'doc': '<p>Returns a constraint that checks that a stack is not empty.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StackConstraints', 'type': 'class', 'url': 'examples/class_StackConstraints.html', 'doc': '<p>Class defining common constraints on stacks for use in preconditions, postconditions, or specifications.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'org.justceyin.specifications.reporters', 'type': 'package', 'url': 'reporters/index.html', 'doc': '<p>Package of basic reporters for BDD specification run results.</p>\n', 'tags': [],'icons': ['icon-package']},
{'name': 'Reporter.report', 'type': 'function', 'url': 'reporters/interface_Reporter.html#report', 'doc': '<p>Runs the reporter to produce its output text.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Reporter', 'type': 'interface', 'url': 'reporters/interface_Reporter.html', 'doc': '<p>Interface to a reporter of constraint checking results.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'SimpleTextReporter.report', 'type': 'function', 'url': 'reporters/class_SimpleTextReporter.html#report', 'doc': '<p>Runs the reporter to produce its output text.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'SimpleTextReporter', 'type': 'class', 'url': 'reporters/class_SimpleTextReporter.html', 'doc': '<p>Reporter produces simple indented text of the constraint checking result messages.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'org.justceyin.specifications.requirements', 'type': 'package', 'url': 'requirements/index.html', 'doc': '<p>Package contains a hierarchy of \'requirements\' - individual declaration line items in a\nlarger specification.</p>\n', 'tags': [],'icons': ['icon-package']},
{'name': 'Behavior.expect', 'type': 'function', 'url': 'requirements/class_Behavior.html#expect', 'doc': '<p>Defines a requirement by applying a constraint to the transformed output.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Behavior.expectAnException', 'type': 'function', 'url': 'requirements/class_Behavior.html#expectAnException', 'doc': '<p>Defines a requirement that expects an exception to be thrown by the setup/transform process.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Behavior.expectNonexistentResult', 'type': 'function', 'url': 'requirements/class_Behavior.html#expectNonexistentResult', 'doc': '<p>Defines a requirement that expects a nonexistent outcome.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Behavior.followedBy', 'type': 'function', 'url': 'requirements/class_Behavior.html#followedBy', 'doc': '<p>Augments the set up operation of this behavior to produce a new behavior with composed set up operation.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Behavior', 'type': 'class', 'url': 'requirements/class_Behavior.html', 'doc': '<p>Intermediate result in a fluent interface for declarative specifications - represents a set of starting values\nand a…</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'BehaviorRequirement.check', 'type': 'function', 'url': 'requirements/class_BehaviorRequirement.html#check', 'doc': '<p>Tests whether the requirement has been met for the given input, set up, and expected outcome.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'BehaviorRequirement', 'type': 'class', 'url': 'requirements/class_BehaviorRequirement.html', 'doc': '<p>A requirement defined in terms of a starting point, a set up (transform) operation, and an expected outcome\nthat is…</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'ExpectedExceptionRequirement.check', 'type': 'function', 'url': 'requirements/class_ExpectedExceptionRequirement.html#check', 'doc': '<p>Tests whether the requirement has been met for the given input, set up, and expected outcome.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ExpectedExceptionRequirement', 'type': 'class', 'url': 'requirements/class_ExpectedExceptionRequirement.html', 'doc': '<p>A requirement defined in terms of a starting point, a set up (transform) operation, and an exception\nthat is expected…</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'InitializationRequirement.check', 'type': 'function', 'url': 'requirements/class_InitializationRequirement.html#check', 'doc': '<p>Tests whether the constraint has been met.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'InitializationRequirement', 'type': 'class', 'url': 'requirements/class_InitializationRequirement.html', 'doc': '<p>Requirement represented by an expected constraint on a given set of starting values.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'NonexistenceRequirement.check', 'type': 'function', 'url': 'requirements/class_NonexistenceRequirement.html#check', 'doc': '<p>Tests whether the requirement has been met for the given input, set up, and expected outcome.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'NonexistenceRequirement', 'type': 'class', 'url': 'requirements/class_NonexistenceRequirement.html', 'doc': '<p>A requirement defined in terms of a starting point, a set up (transform) operation with the output\nexpected to be null.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'Requirement.check', 'type': 'function', 'url': 'requirements/interface_Requirement.html#check', 'doc': '<p>Checks whether the requirement is satisfied.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Requirement', 'type': 'interface', 'url': 'requirements/interface_Requirement.html', 'doc': '<p>Defines a single requirement specification.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'StartingFrom', 'type': 'class', 'url': 'requirements/class_StartingFrom.html', 'doc': '<p>Starting point for a fluent interface for declaring specifications.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'StartingFromAnyOf.after', 'type': 'function', 'url': 'requirements/class_StartingFromAnyOf.html#after', 'doc': '<p>Expands the specification with a set up (transform) operation to be applied to the starting value(s).</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StartingFromAnyOf.expect', 'type': 'function', 'url': 'requirements/class_StartingFromAnyOf.html#expect', 'doc': '<p>Declares a specification via a constraint on the starting value itself.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StartingFromAnyOf.or', 'type': 'function', 'url': 'requirements/class_StartingFromAnyOf.html#or', 'doc': '<p>Augments the starting point with an additional starting value.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'StartingFromAnyOf', 'type': 'class', 'url': 'requirements/class_StartingFromAnyOf.html', 'doc': '<p>Starting point for a fluent interface declarative specification constraining multiple starting values.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'org.justceyin.specifications.runners', 'type': 'package', 'url': 'runners/index.html', 'doc': '<p>Package declaring specification runners that execute specifications given in different ways.</p>\n', 'tags': [],'icons': ['icon-package']},
{'name': 'SimpleSpecificationRunner.run', 'type': 'function', 'url': 'runners/class_SimpleSpecificationRunner.html#run', 'doc': '<p>Runs this runner on its given specification.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'SimpleSpecificationRunner', 'type': 'class', 'url': 'runners/class_SimpleSpecificationRunner.html', 'doc': '<p>Simple specification runner that executes a (possibly composite) specification.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'SpecificationRunner.run', 'type': 'function', 'url': 'runners/interface_SpecificationRunner.html#run', 'doc': '<p>Runs this runner on its given specifications.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'SpecificationRunner', 'type': 'interface', 'url': 'runners/interface_SpecificationRunner.html', 'doc': '<p>Interface to a specification runner.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'org.justceyin.specifications', 'type': 'module', 'url': 'index.html', 'doc': '<h2>JustCeyin-Specifications</h2>\n<p>Module defining classes for behavior-driven design style…</p>\n', 'tags': [],'icons': []}];
var tagIndex = [
];
