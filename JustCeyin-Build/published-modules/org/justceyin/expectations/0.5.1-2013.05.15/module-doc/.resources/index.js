var index = [
{'name': 'org.justceyin.expectations', 'type': 'package', 'url': 'index.html#section-package', 'doc': '<p>Package containing expectations - classes that initiate constraint checking within behavior-driven\ndevelopment…</p>\n', 'tags': [],'icons': ['icon-package']},
{'name': 'AssertedExpectation.named', 'type': 'function', 'url': 'class_AssertedExpectation.html#named', 'doc': '<p>Provides a value name to be used in messages arising from the constraint built by this expectation.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'AssertedExpectation.toBe', 'type': 'function', 'url': 'class_AssertedExpectation.html#toBe', 'doc': '<p>Performs a constraint check, giving back a constraint check result.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'AssertedExpectation.toOptionallyBe', 'type': 'function', 'url': 'class_AssertedExpectation.html#toOptionallyBe', 'doc': '<p>Performs a constraint check if a value exists; gives back a constraint check result,\nsucceeding if the tested actual…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'AssertedExpectation.toNotExist', 'type': 'function', 'url': 'class_AssertedExpectation.html#toNotExist', 'doc': '<p>Performs a constraint check on a value that is expected to not exist.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'AssertedExpectation', 'type': 'class', 'url': 'class_AssertedExpectation.html', 'doc': '<p>Adapter class wraps an expectation and throws an assertion if it fails when checked.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'constrain', 'type': 'function', 'url': 'index.html#constrain', 'doc': '<p>Top level function establishes the start of a declarative asserted expectation.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ExistentExpectation.named', 'type': 'function', 'url': 'class_ExistentExpectation.html#named', 'doc': '<p>Provides a value name to be used in messages arising from the constraint built by this expectation.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ExistentExpectation.toBe', 'type': 'function', 'url': 'class_ExistentExpectation.html#toBe', 'doc': '<p>Performs a constraint check, giving back a constraint check result.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ExistentExpectation.toOptionallyBe', 'type': 'function', 'url': 'class_ExistentExpectation.html#toOptionallyBe', 'doc': '<p>Performs a constraint check if a value exists; gives back a constraint check result,\nsucceeding if the tested actual…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ExistentExpectation.toNotExist', 'type': 'function', 'url': 'class_ExistentExpectation.html#toNotExist', 'doc': '<p>Performs a constraint check on a value that is expected to not exist.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'ExistentExpectation', 'type': 'class', 'url': 'class_ExistentExpectation.html', 'doc': '<p>Class forms the start of a fluent interface API for declarative constraints within BDD specifications.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'expect', 'type': 'function', 'url': 'index.html#expect', 'doc': '<p>Top level function establishes the start of a declarative expectation.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Expectation.named', 'type': 'function', 'url': 'interface_Expectation.html#named', 'doc': '<p>Provides a value name to be used in messages arising from the constraint built by this expectation.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Expectation.toBe', 'type': 'function', 'url': 'interface_Expectation.html#toBe', 'doc': '<p>Performs a constraint check, giving back a constraint check result.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Expectation.toOptionallyBe', 'type': 'function', 'url': 'interface_Expectation.html#toOptionallyBe', 'doc': '<p>Performs a constraint check if a value exists; gives back a constraint check result,\nsucceeding if the tested actual…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Expectation.toNotExist', 'type': 'function', 'url': 'interface_Expectation.html#toNotExist', 'doc': '<p>Performs a constraint check on a value that is expected to not exist.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Expectation', 'type': 'interface', 'url': 'interface_Expectation.html', 'doc': '<p>Interface for the starting point of a fluent interface API for declarative constraints within BDD specifications.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'guarantee', 'type': 'function', 'url': 'index.html#guarantee', 'doc': '<p>Top level function establishes the start of a declarative asserted expectation.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'NonexistentExpectation.named', 'type': 'function', 'url': 'class_NonexistentExpectation.html#named', 'doc': '<p>Provides a value name to be used in messages arising from the constraint built by this expectation.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'NonexistentExpectation.toBe', 'type': 'function', 'url': 'class_NonexistentExpectation.html#toBe', 'doc': '<p>Performs a constraint check, giving back a constraint check result.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'NonexistentExpectation.toOptionallyBe', 'type': 'function', 'url': 'class_NonexistentExpectation.html#toOptionallyBe', 'doc': '<p>Performs a constraint check if a value exists; gives back a constraint check result,\nsucceeding if the tested actual…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'NonexistentExpectation.toNotExist', 'type': 'function', 'url': 'class_NonexistentExpectation.html#toNotExist', 'doc': '<p>Performs a constraint check on a value that is expected to not exist.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'NonexistentExpectation', 'type': 'class', 'url': 'class_NonexistentExpectation.html', 'doc': '<p>Class forms the start of a fluent interface API for declarative constraints within BDD specifications.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'org.justceyin.expectations.constraints', 'type': 'package', 'url': 'constraints/index.html', 'doc': '<p>Package of classes related to constraint checking for behavior-driven development and design-by-contract.</p>\n', 'tags': [],'icons': ['icon-package']},
{'name': 'AdjectivalConstraint', 'type': 'class', 'url': 'constraints/class_AdjectivalConstraint.html', 'doc': '<p>A constraint with messages expressed in terms of a simple adjective like \'empty\' or \'ready\'.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'AndConstraint.check', 'type': 'function', 'url': 'constraints/class_AndConstraint.html#check', 'doc': '<p>Checks this constraint against a given actual value with an optional name of that value\nfor use in message output.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'AndConstraint', 'type': 'class', 'url': 'constraints/class_AndConstraint.html', 'doc': '<p>Constraint class represents a conjunction of two individual constraints.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'BasicConstraint.check', 'type': 'function', 'url': 'constraints/class_BasicConstraint.html#check', 'doc': '<p>Applies the constraint by calling the predicate and then computing the message according to the outcome.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'BasicConstraint', 'type': 'class', 'url': 'constraints/class_BasicConstraint.html', 'doc': '<p>Common higher order constraint that computes a test result from a predicate and a function that\ncomputes the message…</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'ComparisonConstraint', 'type': 'class', 'url': 'constraints/class_ComparisonConstraint.html', 'doc': '<p>Typical higher order constraint that produces standard messages for comparing an actual and comparable value.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'Constraint.check', 'type': 'function', 'url': 'constraints/interface_Constraint.html#check', 'doc': '<p>Checks this constraint against a given actual value with an optional name of that value\nfor use in message output.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Constraint.and', 'type': 'function', 'url': 'constraints/interface_Constraint.html#and', 'doc': '<p>Builds a new constraint that is the conjunction of this constraint and another.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Constraint.or', 'type': 'function', 'url': 'constraints/interface_Constraint.html#or', 'doc': '<p>Builds a new constraint that is the disjunction of this constraint and another.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Constraint', 'type': 'interface', 'url': 'constraints/interface_Constraint.html', 'doc': '<p>Interface defining the behavior of a constraint.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'checkConstraint', 'type': 'function', 'url': 'constraints/index.html#checkConstraint', 'doc': '<p>Top level helper function for checking a constraint against a given actual value with an\noptional name of that value…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ConstraintCheckResult.isSuccess', 'type': 'value', 'url': 'constraints/class_ConstraintCheckResult.html#isSuccess', 'doc': '<p>Whether the constraint was checked successfully.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ConstraintCheckResult.message', 'type': 'value', 'url': 'constraints/class_ConstraintCheckResult.html#message', 'doc': '<p>Message describing the outcome of a constraint checking operation</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ConstraintCheckResult', 'type': 'class', 'url': 'constraints/class_ConstraintCheckResult.html', 'doc': '<p>Abstract class that enumerates possible constraint checking outcomes: success,\nfailure, or unexpected exception.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'isSuccessConstraintCheckResult', 'type': 'function', 'url': 'constraints/index.html#isSuccessConstraintCheckResult', 'doc': '<p>Top level helper function determines whether a constraint was checked successfully.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ConstraintCheckSuccess.isSuccess', 'type': 'value', 'url': 'constraints/class_ConstraintCheckSuccess.html#isSuccess', 'doc': '<p>Whether the constraint was checked successfully.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'ConstraintCheckSuccess', 'type': 'class', 'url': 'constraints/class_ConstraintCheckSuccess.html', 'doc': '<p>Class representing a successful constraint checking outcome.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'ConstraintCheckFailure', 'type': 'class', 'url': 'constraints/class_ConstraintCheckFailure.html', 'doc': '<p>Class representing a failed constraint outcome with a given message explaining the failure.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'ConstraintCheckUnexpectedNull', 'type': 'class', 'url': 'constraints/class_ConstraintCheckUnexpectedNull.html', 'doc': '<p>Class representing a constraint outcome that was unexpectedly checked on a null value.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'ConstraintCheckUnexpectedException.exception', 'type': 'value', 'url': 'constraints/class_ConstraintCheckUnexpectedException.html#exception', 'doc': '<p>The exception that was thrown unexpectedly.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ConstraintCheckUnexpectedException', 'type': 'class', 'url': 'constraints/class_ConstraintCheckUnexpectedException.html', 'doc': '<p>Class representing a constraint outcome that unexpectedly threw an exception.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'ConstraintCheckComposite.childConstraintCheckResults', 'type': 'value', 'url': 'constraints/class_ConstraintCheckComposite.html#childConstraintCheckResults', 'doc': '<p>The child constraint checking results of this composite result.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ConstraintCheckComposite.isSuccess', 'type': 'value', 'url': 'constraints/class_ConstraintCheckComposite.html#isSuccess', 'doc': '<p>Whether the constraint was checked successfully, i.e. all children were successful.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'ConstraintCheckComposite', 'type': 'class', 'url': 'constraints/class_ConstraintCheckComposite.html', 'doc': '<p>Class representing a composite constraint checking outcome.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'OrConstraint.check', 'type': 'function', 'url': 'constraints/class_OrConstraint.html#check', 'doc': '<p>Checks this constraint against a given actual value with an optional name of that value\nfor use in message output.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'OrConstraint', 'type': 'class', 'url': 'constraints/class_OrConstraint.html', 'doc': '<p>Constraint class represents a disjunction of two individual constraints.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'org.justceyin.expectations.constraints.providers', 'type': 'package', 'url': 'constraints/providers/index.html', 'doc': '<p>Package containing predefined providers of constraints for built-in Ceylon types.</p>\n', 'tags': [],'icons': ['icon-package']},
{'name': 'aBoolean.thatIsTrue', 'type': 'attribute', 'url': 'constraints/providers/object_aBoolean.html#thatIsTrue', 'doc': '<p>Returns a constraint that checks that a boolean value is true.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'aBoolean.thatIsFalse', 'type': 'attribute', 'url': 'constraints/providers/object_aBoolean.html#thatIsFalse', 'doc': '<p>Returns a constraint that checks that a boolean value is false.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'aBoolean', 'type': 'object', 'url': 'constraints/providers/object_aBoolean.html', 'doc': '<p>Concrete object providing constraints on Boolean values.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'aBoolean', 'type': 'value', 'url': 'constraints/providers/index.html#aBoolean', 'doc': '<p>Concrete object providing constraints on Boolean values.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'aDate.afterToday', 'type': 'attribute', 'url': 'constraints/providers/object_aDate.html#afterToday', 'doc': '<p>Returns a constraint that checks that a date is in the future.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'aDate.beforeToday', 'type': 'attribute', 'url': 'constraints/providers/object_aDate.html#beforeToday', 'doc': '<p>Returns a constraint that checks that a date is in the past.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'aDate.onOrAfterToday', 'type': 'attribute', 'url': 'constraints/providers/object_aDate.html#onOrAfterToday', 'doc': '<p>Returns a constraint that checks that a date is today or in the future.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'aDate.onOrBeforeToday', 'type': 'attribute', 'url': 'constraints/providers/object_aDate.html#onOrBeforeToday', 'doc': '<p>Returns a constraint that checks that a date is today or in the past.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'aDate.today', 'type': 'attribute', 'url': 'constraints/providers/object_aDate.html#today', 'doc': '<p>Returns a constraint that checks that a date is today.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'aDate', 'type': 'object', 'url': 'constraints/providers/object_aDate.html', 'doc': '<p>Concrete object providing constraints on dates.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'aDate', 'type': 'value', 'url': 'constraints/providers/index.html#aDate', 'doc': '<p>Concrete object providing constraints on dates.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'aFloat.thatIsFinite', 'type': 'attribute', 'url': 'constraints/providers/object_aFloat.html#thatIsFinite', 'doc': '<p>Returns a constraint that checks that a floating point value is finite.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'aFloat.thatIsInfinite', 'type': 'attribute', 'url': 'constraints/providers/object_aFloat.html#thatIsInfinite', 'doc': '<p>Returns a constraint that checks that a floating point value is infinite.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'aFloat.thatIsUndefined', 'type': 'attribute', 'url': 'constraints/providers/object_aFloat.html#thatIsUndefined', 'doc': '<p>Returns a constraint that checks that a floating point value is undefined.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'aFloat.thatIsNotUndefined', 'type': 'attribute', 'url': 'constraints/providers/object_aFloat.html#thatIsNotUndefined', 'doc': '<p>Returns a constraint that checks that a floating point value is not undefined.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'aFloat.thatIsStrictlyNegative', 'type': 'attribute', 'url': 'constraints/providers/object_aFloat.html#thatIsStrictlyNegative', 'doc': '<p>Returns a constraint that checks that a floating point value is strictly negative (less than 0).</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'aFloat.thatIsStrictlyPositive', 'type': 'attribute', 'url': 'constraints/providers/object_aFloat.html#thatIsStrictlyPositive', 'doc': '<p>Returns a constraint that checks that a floating point value is strictly positive (greater than 0).</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'aFloat', 'type': 'object', 'url': 'constraints/providers/object_aFloat.html', 'doc': '<p>Concrete object providing constraints on floating point numbers.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'aFloat', 'type': 'value', 'url': 'constraints/providers/index.html#aFloat', 'doc': '<p>Concrete object providing constraints on floating point numbers.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'anInteger', 'type': 'object', 'url': 'constraints/providers/object_anInteger.html', 'doc': '<p>Concrete object providing constraints on integers.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'anInteger', 'type': 'value', 'url': 'constraints/providers/index.html#anInteger', 'doc': '<p>Concrete object providing constraints on integers.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'aString.longerThan', 'type': 'function', 'url': 'constraints/providers/object_aString.html#longerThan', 'doc': '<p>Returns a constraint that checks that a string is longer than a given length.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'aString.shorterThan', 'type': 'function', 'url': 'constraints/providers/object_aString.html#shorterThan', 'doc': '<p>Returns a constraint that checks that a string is shorter than a given length.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'aString.thatIsNotEmptyWithMaximumLength', 'type': 'function', 'url': 'constraints/providers/object_aString.html#thatIsNotEmptyWithMaximumLength', 'doc': '<p>Returns a constraint that checks that a string is not empty and is shorter than or equal in length to a given value.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'aString.withMaximumLength', 'type': 'function', 'url': 'constraints/providers/object_aString.html#withMaximumLength', 'doc': '<p>Returns a constraint that checks that a string is shorter than or equal in length to a given value.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'aString.withMinimumLength', 'type': 'function', 'url': 'constraints/providers/object_aString.html#withMinimumLength', 'doc': '<p>Returns a constraint that checks that a string is longer than or equal in length to a given value.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'aString', 'type': 'object', 'url': 'constraints/providers/object_aString.html', 'doc': '<p>Concrete object providing constraints on strings.</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'aString', 'type': 'value', 'url': 'constraints/providers/index.html#aString', 'doc': '<p>Concrete object providing constraints on strings.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'CategoryConstraints.thatContains', 'type': 'function', 'url': 'constraints/providers/interface_CategoryConstraints.html#thatContains', 'doc': '<p>Returns a constraint that checks whether a category contains a given item.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'CategoryConstraints.thatContainsAnyElementOf', 'type': 'function', 'url': 'constraints/providers/interface_CategoryConstraints.html#thatContainsAnyElementOf', 'doc': '<p>Returns a constraint that checks whether a category contains any one of a given list of items.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'CategoryConstraints.thatContainsEveryElementOf', 'type': 'function', 'url': 'constraints/providers/interface_CategoryConstraints.html#thatContainsEveryElementOf', 'doc': '<p>Returns a constraint that checks whether a category contains every item in a given list of items.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'CategoryConstraints', 'type': 'interface', 'url': 'constraints/providers/interface_CategoryConstraints.html', 'doc': '<p>Mixin class defines constraints on a category.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'CollectionConstraints.thatIsEmpty', 'type': 'attribute', 'url': 'constraints/providers/interface_CollectionConstraints.html#thatIsEmpty', 'doc': '<p>Returns a constraint that checks that a collection is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'CollectionConstraints.thatIsNotEmpty', 'type': 'attribute', 'url': 'constraints/providers/interface_CollectionConstraints.html#thatIsNotEmpty', 'doc': '<p>Returns a constraint that checks that a collection is not empty.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'CollectionConstraints', 'type': 'interface', 'url': 'constraints/providers/interface_CollectionConstraints.html', 'doc': '<p>Mixin class defines constraints on a collection.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'ComparableConstraints.greaterThan', 'type': 'function', 'url': 'constraints/providers/class_ComparableConstraints.html#greaterThan', 'doc': '<p>Returns a constraint that checks that the actual value is greater than a comparable value.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ComparableConstraints.greaterThanOrEqualTo', 'type': 'function', 'url': 'constraints/providers/class_ComparableConstraints.html#greaterThanOrEqualTo', 'doc': '<p>Returns a constraint that checks that the actual value is greater than or equal to a comparable value.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ComparableConstraints.lessThan', 'type': 'function', 'url': 'constraints/providers/class_ComparableConstraints.html#lessThan', 'doc': '<p>Returns a constraint that checks that the actual value is less than a comparable value.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ComparableConstraints.lessThanOrEqualTo', 'type': 'function', 'url': 'constraints/providers/class_ComparableConstraints.html#lessThanOrEqualTo', 'doc': '<p>Returns a constraint that checks that the actual value is less than or equal to a comparable value.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ComparableConstraints', 'type': 'class', 'url': 'constraints/providers/class_ComparableConstraints.html', 'doc': '<p>Concrete constraint class for checking comparable values - less than, greater than, etc.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'EqualityConstraints.withValue', 'type': 'function', 'url': 'constraints/providers/class_EqualityConstraints.html#withValue', 'doc': '<p>Returns a constraint that checks that an actual value equals an expected value.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'EqualityConstraints', 'type': 'class', 'url': 'constraints/providers/class_EqualityConstraints.html', 'doc': '<p>Concrete constraint class enforces equality of an actual value with an expected value.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'IntegralConstraints.thatIsZero', 'type': 'attribute', 'url': 'constraints/providers/interface_IntegralConstraints.html#thatIsZero', 'doc': '<p>Returns a constraint that checks that an integral value is zero.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'IntegralConstraints.thatIsNonzero', 'type': 'attribute', 'url': 'constraints/providers/interface_IntegralConstraints.html#thatIsNonzero', 'doc': '<p>Returns a constraint that checks that an integral value is not zero.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'IntegralConstraints.thatIsUnit', 'type': 'attribute', 'url': 'constraints/providers/interface_IntegralConstraints.html#thatIsUnit', 'doc': '<p>Returns a constraint that checks that an integral value is unit (one).</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'IntegralConstraints.thatIsNotUnit', 'type': 'attribute', 'url': 'constraints/providers/interface_IntegralConstraints.html#thatIsNotUnit', 'doc': '<p>Returns a constraint that checks that an integral value is not zero.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'IntegralConstraints', 'type': 'interface', 'url': 'constraints/providers/interface_IntegralConstraints.html', 'doc': '<p>Mixin constraint interface for checking integral values - tests for zero and unit.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'ListConstraints.withSize', 'type': 'function', 'url': 'constraints/providers/interface_ListConstraints.html#withSize', 'doc': '<p>Returns a constraint that checks that a list has a given size.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ListConstraints', 'type': 'interface', 'url': 'constraints/providers/interface_ListConstraints.html', 'doc': '<p>Mixin class defines constraints on a list.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'NumberConstraints.thatIsNegative', 'type': 'attribute', 'url': 'constraints/providers/interface_NumberConstraints.html#thatIsNegative', 'doc': '<p>Returns a constraint that checks that a number is negative (less than 0).</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'NumberConstraints.thatIsNotNegative', 'type': 'attribute', 'url': 'constraints/providers/interface_NumberConstraints.html#thatIsNotNegative', 'doc': '<p>Returns a constraint that checks that a number is not negative (0 or positive).</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'NumberConstraints.thatIsPositive', 'type': 'attribute', 'url': 'constraints/providers/interface_NumberConstraints.html#thatIsPositive', 'doc': '<p>Returns a constraint that checks that a number is positive (greater than 0).</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'NumberConstraints.thatIsNotPositive', 'type': 'attribute', 'url': 'constraints/providers/interface_NumberConstraints.html#thatIsNotPositive', 'doc': '<p>Returns a constraint that checks that a number is not positive (0 or negative).</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'NumberConstraints', 'type': 'interface', 'url': 'constraints/providers/interface_NumberConstraints.html', 'doc': '<p>Mixin constraint interface for checking number values - positive and negative.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'org.justceyin.expectations', 'type': 'module', 'url': 'index.html', 'doc': '<h2>JustCeyin-Expectations</h2>\n<p>Module defining \'expectations\' - English-like fluent interface style…</p>\n', 'tags': [],'icons': []}];
var tagIndex = [
];
